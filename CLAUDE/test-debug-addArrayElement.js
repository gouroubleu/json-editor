/**
 * DEBUG PROFOND DE addArrayElement EN MODE √âDITION
 * Capturer tous les logs pour voir ce qui se passe vraiment
 */

const puppeteer = require('puppeteer');
const fs = require('fs');

async function debugAddArrayElement() {
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox'],
    defaultViewport: { width: 1600, height: 1200 }
  });

  const page = await browser.newPage();

  // Capturer TOUS les logs console
  const logs = [];
  page.on('console', msg => {
    const text = msg.text();
    logs.push({
      type: msg.type(),
      text: text,
      timestamp: new Date().toISOString()
    });
    console.log(`[${msg.type()}] ${text}`);
  });

  // Capturer les erreurs
  page.on('pageerror', error => {
    logs.push({
      type: 'error',
      text: `PAGE ERROR: ${error.message}`,
      timestamp: new Date().toISOString()
    });
    console.log(`[ERROR] ${error.message}`);
  });

  try {
    console.log('üêõ DEBUG DEEP addArrayElement - Chargement...');

    await page.goto('http://localhost:5501/bdd/test-user/entity_mfqm0qvi_ainoph/edit/', {
      waitUntil: 'networkidle0',
      timeout: 30000
    });

    await new Promise(resolve => setTimeout(resolve, 3000));

    // Navigation vers adresse
    console.log('üìç Navigation vers adresse...');
    await page.evaluate(() => {
      console.log('üîß NAVIGATE TO PROPERTY - CALLED: adresse columnIndex: 0');
      const fieldElements = Array.from(document.querySelectorAll('.field-name'));
      const adresseField = fieldElements.find(el => el.textContent.includes('adresse'));
      const fieldContainer = adresseField?.closest('.field-item');
      const navigateButton = fieldContainer?.querySelector('button[title="Explorer"]');
      navigateButton?.click();
    });

    await new Promise(resolve => setTimeout(resolve, 4000));

    // √âtat avant ajout + debug des donn√©es
    console.log('üìç DEBUG: √âtat des donn√©es avant ajout...');

    const debugAvant = await page.evaluate(() => {
      // Acc√©der au contexte EntityCreation si possible
      const arrayContainer = document.querySelector('.array-container');
      const arrayItems = document.querySelectorAll('.array-item');

      // Analyser le DOM et l'√©tat JavaScript
      const domState = {
        itemsCount: arrayItems.length,
        containerText: arrayContainer?.textContent?.substring(0, 200) || 'N/A'
      };

      // Chercher des indices sur l'√©tat interne
      console.log('üîß DEBUG AVANT - DOM State:', domState);
      console.log('üîß DEBUG AVANT - Array items found:', domState.itemsCount);

      return domState;
    });

    console.log('üìä AVANT AJOUT:');
    console.log(`   DOM items: ${debugAvant.itemsCount}`);

    // CLIC SUR AJOUTER avec debug maximum
    console.log('üìç DEBUG: CLIC AJOUTER avec logs d√©taill√©s...');

    const clicResult = await page.evaluate(() => {
      console.log('üîß AVANT CLIC - Recherche boutons ajouter...');

      const addButtons = Array.from(document.querySelectorAll('button')).filter(btn =>
        btn.textContent.includes('Ajouter') || btn.textContent.includes('‚ûï')
      );

      console.log('üîß AVANT CLIC - Boutons trouv√©s:', addButtons.length);

      if (addButtons.length === 0) {
        return { error: 'Aucun bouton ajouter trouv√©' };
      }

      // √âtat juste avant le clic
      const stateAvantClic = {
        itemsCount: document.querySelectorAll('.array-item').length,
        containerText: document.querySelector('.array-container')?.textContent?.substring(0, 100) || 'N/A'
      };

      console.log('üîß AVANT CLIC - √âtat DOM:', stateAvantClic);
      console.log('üîß CLIC SUR BOUTON AJOUTER - D√âBUT');

      // CLIC !
      addButtons[0].click();

      console.log('üîß CLIC SUR BOUTON AJOUTER - FIN');

      // √âtat imm√©diat apr√®s clic
      const stateApresClic = {
        itemsCount: document.querySelectorAll('.array-item').length,
        containerText: document.querySelector('.array-container')?.textContent?.substring(0, 100) || 'N/A'
      };

      console.log('üîß APRES CLIC IMMEDIAT - √âtat DOM:', stateApresClic);

      return {
        success: true,
        stateAvantClic,
        stateApresClic
      };
    });

    if (clicResult.error) {
      throw new Error(clicResult.error);
    }

    console.log('üìä R√âSULTAT CLIC:');
    console.log(`   Avant: ${clicResult.stateAvantClic.itemsCount} items`);
    console.log(`   Apr√®s: ${clicResult.stateApresClic.itemsCount} items`);

    // Attendre et analyser les logs qui arrivent
    console.log('üìç DEBUG: Attente des logs addArrayElement...');

    await new Promise(resolve => setTimeout(resolve, 6000));

    // √âtat final
    const debugFinal = await page.evaluate(() => {
      const finalState = {
        itemsCount: document.querySelectorAll('.array-item').length,
        containerText: document.querySelector('.array-container')?.textContent?.substring(0, 200) || 'N/A'
      };

      console.log('üîß DEBUG FINAL - √âtat DOM:', finalState);

      return finalState;
    });

    console.log('üìä √âTAT FINAL:');
    console.log(`   Items finaux: ${debugFinal.itemsCount}`);

    const rapport = {
      timestamp: new Date().toISOString(),
      debugAvant,
      clicResult,
      debugFinal,
      allLogs: logs,
      problemeIdentifie: debugFinal.itemsCount <= debugAvant.itemsCount
    };

    fs.writeFileSync('/home/gouroubleu/WS/json-editor/CLAUDE/debug-addArrayElement-rapport.json', JSON.stringify(rapport, null, 2));

    await browser.close();

    // Analyser les logs pour identifier le probl√®me
    console.log('\\nüîç ANALYSE DES LOGS:');

    const addArrayLogs = logs.filter(log =>
      log.text.includes('addArrayElement') ||
      log.text.includes('EntityCreationContext') ||
      log.text.includes('updateEntityData')
    );

    if (addArrayLogs.length === 0) {
      console.log('‚ùå AUCUN LOG addArrayElement trouv√© !');
      console.log('   La fonction addArrayElement n\'est peut-√™tre pas appel√©e');
      return { probleme: 'FUNCTION_NOT_CALLED', rapport };
    }

    console.log(`‚úÖ ${addArrayLogs.length} logs addArrayElement trouv√©s:`);
    addArrayLogs.forEach(log => {
      console.log(`   [${log.type}] ${log.text}`);
    });

    if (debugFinal.itemsCount <= debugAvant.itemsCount) {
      console.log('\\n‚ùå PROBL√àME PERSISTE apr√®s correction useTask$');
      console.log('   Le probl√®me vient d\'ailleurs...');
      return { probleme: 'OTHER_ISSUE', rapport };
    } else {
      console.log('\\n‚úÖ CORRECTION R√âUSSIE !');
      return { success: true, rapport };
    }

  } catch (error) {
    console.error('‚ùå Erreur debug:', error);
    await browser.close();
    return { error: error.message, logs };
  }
}

// Ex√©cution
debugAddArrayElement().then(result => {
  if (result.error) {
    console.log('\\nüö® DEBUG √âCHOU√â:', result.error);
    process.exit(1);
  } else if (result.probleme) {
    console.log(`\\n‚ùå PROBL√àME IDENTIFI√â: ${result.probleme}`);
    console.log('Il faut investiguer plus profond√©ment...');
    process.exit(1);
  } else {
    console.log('\\n‚úÖ PROBL√àME R√âSOLU !');
    process.exit(0);
  }
}).catch(console.error);