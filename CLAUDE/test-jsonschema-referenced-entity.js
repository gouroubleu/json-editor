#!/usr/bin/env node

/**
 * Test pour v√©rifier le chargement du sch√©ma r√©f√©renc√© pour les entit√©s jsonschema
 * Doit v√©rifier que quand on clique sur la fl√®che de 'hhh' (type jsonschema),
 * le formulaire affich√© correspond au sch√©ma 'user' r√©f√©renc√©
 */

const puppeteer = require('puppeteer');

async function testJsonschemaReferencedEntity() {
  console.log('üéØ Test formulaire entit√© avec sch√©ma r√©f√©renc√©');

  const browser = await puppeteer.launch({
    headless: 'new',
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  const page = await browser.newPage();
  await page.setViewport({ width: 1400, height: 900 });

  try {
    console.log('üåê Navigation vers http://localhost:5503/bdd/test-user/new/');
    await page.goto('http://localhost:5503/bdd/test-user/new/', {
      waitUntil: 'domcontentloaded',
      timeout: 30000
    });

    await new Promise(resolve => setTimeout(resolve, 3000));

    await page.screenshot({ path: 'CLAUDE/screenshots/test-referenced-initial.png', fullPage: true });
    console.log('üì∏ Screenshot page initiale');

    // Chercher la propri√©t√© hhh (type jsonschema)
    console.log('üîç Recherche propri√©t√© hhh...');

    // Bas√© sur l'analyse, hhh est le 7√®me champ (index 6)
    const hhhFieldIndex = 6;
    const fieldItems = await page.$$('.field-item');

    if (fieldItems.length <= hhhFieldIndex) {
      console.log('‚ùå Propri√©t√© hhh non trouv√©e (pas assez de champs)');
      return false;
    }

    const hhhContainer = fieldItems[hhhFieldIndex];

    // V√©rifier que c'est bien le champ hhh
    const fieldName = await page.evaluate(el => {
      const nameEl = el.querySelector('.field-name');
      return nameEl ? nameEl.textContent.trim() : '';
    }, hhhContainer);

    if (fieldName !== 'hhh') {
      console.log(`‚ùå Champ attendu 'hhh' mais trouv√© '${fieldName}'`);
      return false;
    }

    console.log('‚úÖ Champ hhh trouv√©');

    const exploreButton = await hhhContainer.$('button[title="Explorer"]');
    if (!exploreButton) {
      console.log('‚ùå Bouton explorer non trouv√© pour hhh');
      return false;
    }

    console.log('‚úÖ Bouton explorer trouv√© pour hhh');

    // Cliquer sur le bouton explorer
    await exploreButton.click();
    await new Promise(resolve => setTimeout(resolve, 3000));

    await page.screenshot({ path: 'CLAUDE/screenshots/test-referenced-navigation.png', fullPage: true });
    console.log('üì∏ Screenshot apr√®s navigation');

    // V√©rifier qu'on a bien une nouvelle colonne affich√©e
    const columns = await page.$$('.entity-column');
    console.log(`üìã Nombre de colonnes: ${columns.length}`);

    if (columns.length < 2) {
      console.log('‚ùå Navigation √©chou√©e - pas de nouvelle colonne');
      return false;
    }

    // Chercher le bouton "Ajouter" dans la nouvelle colonne
    const addButton = await page.$('.entity-column:nth-child(2) button, .entity-column:nth-child(2) .btn');
    if (!addButton) {
      console.log('‚ùå Bouton Ajouter non trouv√© dans la colonne hhh');
      return false;
    }

    console.log('‚úÖ Bouton Ajouter trouv√©, clic pour ouvrir le formulaire...');

    // Cliquer sur Ajouter
    await addButton.click();
    await new Promise(resolve => setTimeout(resolve, 3000));

    await page.screenshot({ path: 'CLAUDE/screenshots/test-referenced-form.png', fullPage: true });
    console.log('üì∏ Screenshot formulaire d\'ajout');

    // Analyser le formulaire affich√©
    console.log('üîç Analyse du formulaire affich√©...');

    // Chercher les champs du sch√©ma user (id, nom, email, age)
    const expectedUserFields = ['id', 'nom', 'email', 'age'];
    const foundFields = [];
    const missingFields = [];

    for (const fieldName of expectedUserFields) {
      // Chercher les champs de plusieurs fa√ßons
      const fieldSelectors = [
        `input[name*="${fieldName}"]`,
        `input[placeholder*="${fieldName}"]`,
        `.field-name`,
        `.field-item input`
      ];

      let fieldFound = false;
      for (const selector of fieldSelectors) {
        try {
          const field = await page.$(selector);
          if (field) {
            foundFields.push(fieldName);
            fieldFound = true;
            console.log(`‚úÖ Champ "${fieldName}" trouv√©`);
            break;
          }
        } catch (error) {
          // Continuer avec le s√©lecteur suivant
        }
      }

      if (!fieldFound) {
        missingFields.push(fieldName);
        console.log(`‚ùå Champ "${fieldName}" NON TROUV√â`);
      }
    }

    // Analyser tous les champs pr√©sents pour debug
    const allInputs = await page.$$('input[type="text"], input[type="email"], input[type="number"], select, textarea');
    console.log(`üìã Total des champs trouv√©s: ${allInputs.length}`);

    for (let i = 0; i < allInputs.length; i++) {
      const inputInfo = await page.evaluate(input => ({
        type: input.type,
        name: input.name,
        placeholder: input.placeholder,
        id: input.id,
        value: input.value
      }), allInputs[i]);
      console.log(`üìã Champ ${i}:`, inputInfo);
    }

    // V√©rifier si on a un formulaire g√©n√©rique ou le bon sch√©ma user
    const hasCorrectUserSchema = foundFields.length >= 3; // Au moins 3 des 4 champs attendus
    const hasMissingFields = missingFields.length > 0;

    console.log('\nüìä ANALYSE R√âSULTATS:');
    console.log(`‚úÖ Champs trouv√©s: ${foundFields.join(', ')}`);
    console.log(`‚ùå Champs manquants: ${missingFields.join(', ')}`);
    console.log(`üìã Sch√©ma user correct: ${hasCorrectUserSchema ? 'OUI' : 'NON'}`);

    // Sauvegarder l'analyse
    const analysis = {
      timestamp: new Date().toISOString(),
      test: 'jsonschema-referenced-entity',
      url: page.url(),
      columnsCount: columns.length,
      expectedFields: expectedUserFields,
      foundFields: foundFields,
      missingFields: missingFields,
      totalInputs: allInputs.length,
      hasCorrectSchema: hasCorrectUserSchema,
      success: hasCorrectUserSchema && missingFields.length === 0
    };

    const fs = require('fs').promises;
    await fs.writeFile('CLAUDE/test-jsonschema-referenced-results.json', JSON.stringify(analysis, null, 2));
    console.log('üìÑ Analyse sauvegard√©e');

    return analysis.success;

  } catch (error) {
    console.error('‚ùå ERREUR:', error.message);
    await page.screenshot({ path: 'CLAUDE/screenshots/error-referenced-test.png', fullPage: true });
    return false;
  } finally {
    await browser.close();
  }
}

// Ex√©cution
if (require.main === module) {
  testJsonschemaReferencedEntity()
    .then(success => {
      if (success) {
        console.log('\nüéâ TEST R√âUSSI - Le formulaire utilise le sch√©ma r√©f√©renc√© !');
      } else {
        console.log('\n‚ö†Ô∏è TEST PARTIELLEMENT R√âUSSI - Ajustements n√©cessaires');
      }
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• Erreur fatale:', error);
      process.exit(1);
    });
}