/**
 * TEST AVEC √âL√âMENT D√âJ√Ä EXISTANT
 * Reproduire exactement le probl√®me : tableau avec 1 √©l√©ment ‚Üí ajouter ‚Üí voir si 2e appara√Æt
 */

const puppeteer = require('puppeteer');
const fs = require('fs');

async function testAvecElementExistant() {
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox'],
    defaultViewport: { width: 1600, height: 1200 }
  });

  const page = await browser.newPage();

  try {
    console.log('üéØ TEST AVEC √âL√âMENT D√âJ√Ä EXISTANT - D√©marrage...');

    // Charger une entit√© existante avec donn√©es dans le tableau adresse
    await page.goto('http://localhost:5501/bdd/test-user/entity_mfqm0qvi_ainoph/edit/', {
      waitUntil: 'networkidle0',
      timeout: 30000
    });

    await new Promise(resolve => setTimeout(resolve, 3000));

    // Navigation vers adresse
    console.log('üìç Navigation vers adresse...');
    await page.evaluate(() => {
      const fieldElements = Array.from(document.querySelectorAll('.field-name'));
      const adresseField = fieldElements.find(el => el.textContent.includes('adresse'));
      const fieldContainer = adresseField?.closest('.field-item');
      const navigateButton = fieldContainer?.querySelector('button[title="Explorer"]');
      navigateButton?.click();
    });

    await new Promise(resolve => setTimeout(resolve, 4000));

    // √âTAPE 1 : Analyser l'√©tat initial avec √©l√©ment existant
    console.log('üìç √âTAPE 1: √âtat initial du tableau avec √©l√©ment existant...');

    const etatInitial = await page.evaluate(() => {
      const arrayContainer = document.querySelector('.array-container');
      const arrayItems = document.querySelectorAll('.array-item');
      const arrayHeader = document.querySelector('.array-header');

      // Analyser chaque √©l√©ment en d√©tail
      const elementsDetails = Array.from(arrayItems).map((item, index) => {
        const header = item.querySelector('.array-item-header');
        const preview = item.querySelector('.array-item-preview');
        const actions = item.querySelector('.array-item-actions');
        const isTemporary = item.textContent.includes('Temporaire') || item.classList.contains('temporary-item');

        return {
          index,
          indexAffich√©: header?.querySelector('.array-index')?.textContent || 'N/A',
          type: header?.querySelector('.array-item-type')?.textContent || 'N/A',
          preview: preview?.textContent || 'N/A',
          isTemporary,
          hasDeleteButton: !!actions?.querySelector('button[title*="Supprimer"]'),
          hasExploreButton: !!actions?.querySelector('button[title*="Explorer"]'),
          innerHTML: item.innerHTML.substring(0, 200)
        };
      });

      return {
        nombreElements: arrayItems.length,
        headerText: arrayHeader?.textContent || 'N/A',
        containerText: arrayContainer?.textContent?.substring(0, 300) || 'N/A',
        elementsDetails,
        urlActuelle: window.location.href
      };
    });

    console.log('üìä √âTAT INITIAL AVEC √âL√âMENT EXISTANT:');
    console.log(`   Nombre d'√©l√©ments d√©tect√©s: ${etatInitial.nombreElements}`);
    console.log(`   Header du tableau: ${etatInitial.headerText}`);
    etatInitial.elementsDetails.forEach(el => {
      const status = el.isTemporary ? '‚è≥ TEMPORAIRE' : '‚úÖ PERMANENT';
      console.log(`   [${el.index}] ${el.indexAffich√©} ${el.type} - ${el.preview} (${status})`);
    });

    // Screenshot avant ajout
    await page.screenshot({ path: '/home/gouroubleu/WS/json-editor/CLAUDE/screenshot-avant-ajout-element-existant.png' });

    // √âTAPE 2 : AJOUTER UN NOUVEL √âL√âMENT
    console.log('üìç √âTAPE 2: AJOUT NOUVEL √âL√âMENT...');

    const ajoutResult = await page.evaluate(() => {
      const addButtons = Array.from(document.querySelectorAll('button')).filter(btn =>
        btn.textContent.includes('Ajouter') || btn.textContent.includes('‚ûï')
      );

      if (addButtons.length === 0) {
        return { error: 'Aucun bouton ajouter trouv√©' };
      }

      // √âtat juste avant le clic
      const avantClic = {
        items: document.querySelectorAll('.array-item').length,
        headerText: document.querySelector('.array-header')?.textContent || 'N/A'
      };

      addButtons[0].click();

      return { success: true, avantClic };
    });

    if (ajoutResult.error) {
      throw new Error(ajoutResult.error);
    }

    console.log('‚úÖ Clic sur ajouter effectu√©');
    console.log(`   Avant clic: ${ajoutResult.avantClic.items} √©l√©ments, Header: "${ajoutResult.avantClic.headerText}"`);

    // √âTAPE 3 : Analyser l'√©tat apr√®s ajout (plusieurs v√©rifications)
    console.log('üìç √âTAPE 3: Analyse apr√®s ajout...');

    const verifications = [];
    const delais = [500, 1000, 2000, 3000, 5000];

    for (const delai of delais) {
      await new Promise(resolve => setTimeout(resolve, delai - (verifications.length > 0 ? delais[verifications.length - 1] : 0)));

      const verification = await page.evaluate((moment) => {
        const arrayContainer = document.querySelector('.array-container');
        const arrayItems = document.querySelectorAll('.array-item');
        const arrayHeader = document.querySelector('.array-header');

        const elementsDetails = Array.from(arrayItems).map((item, index) => {
          const header = item.querySelector('.array-item-header');
          const preview = item.querySelector('.array-item-preview');
          const isTemporary = item.textContent.includes('Temporaire') || item.classList.contains('temporary-item');

          return {
            index,
            indexAffich√©: header?.querySelector('.array-index')?.textContent || 'N/A',
            type: header?.querySelector('.array-item-type')?.textContent || 'N/A',
            preview: preview?.textContent || 'N/A',
            isTemporary
          };
        });

        return {
          moment,
          nombreElements: arrayItems.length,
          headerText: arrayHeader?.textContent || 'N/A',
          elementsDetails,
          changementDepuisInitial: arrayItems.length - 1 // Supposant 1 √©l√©ment initial
        };
      }, `APRES_${delai}ms`);

      verifications.push(verification);

      console.log(`üìä ${verification.moment}:`);
      console.log(`   √âl√©ments: ${verification.nombreElements} (changement: +${verification.changementDepuisInitial})`);
      console.log(`   Header: "${verification.headerText}"`);

      if (verification.elementsDetails.length > 1) {
        console.log('   D√©tail des √©l√©ments:');
        verification.elementsDetails.forEach(el => {
          const status = el.isTemporary ? '‚è≥ TEMP' : '‚úÖ PERM';
          console.log(`     [${el.index}] ${el.indexAffich√©} - ${el.preview} (${status})`);
        });
      }
    }

    // Screenshot apr√®s ajout
    await page.screenshot({ path: '/home/gouroubleu/WS/json-editor/CLAUDE/screenshot-apres-ajout-element-existant.png' });

    const rapport = {
      timestamp: new Date().toISOString(),
      etatInitial,
      ajoutResult,
      verifications,
      screenshots: [
        'screenshot-avant-ajout-element-existant.png',
        'screenshot-apres-ajout-element-existant.png'
      ]
    };

    fs.writeFileSync('/home/gouroubleu/WS/json-editor/CLAUDE/test-element-existant-rapport.json', JSON.stringify(rapport, null, 2));

    await browser.close();

    // ANALYSE FINALE
    console.log('\\nüéØ ANALYSE FINALE:');

    const dernierEtat = verifications[verifications.length - 1];
    const problemeDetecte = dernierEtat.nombreElements <= etatInitial.nombreElements;

    console.log(`INITIAL: ${etatInitial.nombreElements} √©l√©ments`);
    console.log(`FINAL: ${dernierEtat.nombreElements} √©l√©ments`);
    console.log(`CHANGEMENT: +${dernierEtat.changementDepuisInitial}`);

    if (problemeDetecte) {
      console.log('‚ùå PROBL√àME CONFIRM√â !');
      console.log('   Le nouvel √©l√©ment N\'APPARA√éT PAS dans la liste du tableau');
      console.log('   L\'utilisateur a raison - √ßa ne fonctionne pas avec des √©l√©ments existants');
      return { probleme: 'NOUVEAU_ELEMENT_INVISIBLE', rapport };
    } else {
      console.log('‚úÖ AJOUT FONCTIONNE !');
      console.log('   Le nouvel √©l√©ment appara√Æt bien dans la liste');
      return { success: true, rapport };
    }

  } catch (error) {
    console.error('‚ùå Erreur test:', error);
    await browser.close();
    return { error: error.message };
  }
}

// Ex√©cution
testAvecElementExistant().then(result => {
  if (result.error) {
    console.log('\\nüö® TEST √âCHOU√â:', result.error);
    process.exit(1);
  } else if (result.probleme) {
    console.log(`\\n‚ùå PROBL√àME CONFIRM√â: ${result.probleme}`);
    console.log('Il faut corriger l\'affichage du nouvel √©l√©ment dans la liste');
    process.exit(1);
  } else {
    console.log('\\n‚úÖ TOUT FONCTIONNE AVEC √âL√âMENTS EXISTANTS');
    process.exit(0);
  }
}).catch(console.error);