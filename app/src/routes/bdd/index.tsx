import { component$, useSignal, useStyles$, useTask$, $ } from '@builder.io/qwik';
import { useNavigate } from '@builder.io/qwik-city';
import { getEntitiesSummary, migrateSchemaEntities } from './services';
import type { EntitySummary } from './types';
import STYLES from './index.scss?inline';

export default component$(() => {
  useStyles$(STYLES);
  
  const nav = useNavigate();
  const entitiesSummary = useSignal<EntitySummary[]>([]);
  const loading = useSignal(true);
  const uiState = useSignal({
    notification: { show: false, type: 'success', message: '' }
  });

  // Charger le r√©sum√© des entit√©s au d√©marrage
  useTask$(async () => {
    try {
      loading.value = true;
      const summary = await getEntitiesSummary();
      entitiesSummary.value = summary;
    } catch (error) {
      console.error('Erreur chargement r√©sum√©:', error);
    } finally {
      loading.value = false;
    }
  });

  const handleSchemaClick = $((schemaName: string) => {
    nav(`/bdd/${schemaName}/`);
  });

  const handleCreateEntity = $((schemaName: string) => {
    nav(`/bdd/${schemaName}/new/`);
  });

  const refreshData = $(async () => {
    loading.value = true;
    try {
      const summary = await getEntitiesSummary();
      entitiesSummary.value = summary;
    } catch (error) {
      console.error('Erreur refresh:', error);
    } finally {
      loading.value = false;
    }
  });

  const showNotification = $((type: 'success' | 'error' | 'warning', message: string) => {
    uiState.value = {
      ...uiState.value,
      notification: { show: true, type, message }
    };
    
    setTimeout(() => {
      uiState.value = {
        ...uiState.value,
        notification: { show: false, type: 'success', message: '' }
      };
    }, 3000);
  });

  const handleMigrateSchema = $(async (schemaName: string) => {
    try {
      const result = await migrateSchemaEntities(schemaName);
      
      if (result.success) {
        await showNotification('success', result.message);
        // Rafra√Æchir les donn√©es pour voir les changements
        await refreshData();
      } else {
        await showNotification('error', result.message);
      }
    } catch (error) {
      console.error('Erreur migration:', error);
      await showNotification('error', 'Erreur lors de la migration des entit√©s');
    }
  });

  return (
    <div class="page-bdd">
      {/* Header */}
      <div class="header">
        <div class="header-content">
          <h1 class="title">Base de Donn√©es - Entit√©s</h1>
          <p class="subtitle">G√©rez vos entit√©s bas√©es sur les sch√©mas JSON</p>
        </div>
        <div class="header-actions">
          <button
            class="btn btn-secondary"
            onClick$={refreshData}
            disabled={loading.value}
          >
            {loading.value ? '‚è≥ Chargement...' : 'üîÑ Actualiser'}
          </button>
          
          <button
            class="btn btn-info"
            onClick$={() => nav('/')}
            title="Retour √† la gestion des sch√©mas JSON"
          >
            üìã JSON Schemas
          </button>
        </div>
      </div>

      {/* Statistiques globales */}
      <div class="stats-section">
        <div class="stat-card">
          <div class="stat-number">
            {entitiesSummary.value.length}
          </div>
          <div class="stat-label">Sch√©mas avec entit√©s</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">
            {entitiesSummary.value.reduce((total, s) => total + s.totalEntities, 0)}
          </div>
          <div class="stat-label">Total entit√©s</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">
            {entitiesSummary.value.reduce((total, s) => total + s.outdatedEntities, 0)}
          </div>
          <div class="stat-label">Entit√©s obsol√®tes</div>
        </div>
      </div>

      {/* Liste des sch√©mas */}
      <div class="schemas-section">
        <div class="section-header">
          <h2 class="section-title">Entit√©s par Sch√©ma</h2>
        </div>

        {loading.value ? (
          <div class="loading-state">
            <div class="spinner"></div>
            <p>Chargement des entit√©s...</p>
          </div>
        ) : entitiesSummary.value.length === 0 ? (
          <div class="empty-state">
            <div class="empty-icon">üóÉÔ∏è</div>
            <h3 class="empty-title">Aucune entit√© cr√©√©e</h3>
            <p class="empty-description">
              Cr√©ez votre premi√®re entit√© bas√©e sur un sch√©ma JSON pour commencer.
            </p>
            <button
              class="btn btn-primary"
              onClick$={() => nav('/')}
            >
              Voir les sch√©mas disponibles
            </button>
          </div>
        ) : (
          <div class="schemas-grid">
            {entitiesSummary.value.map((summary) => (
              <div key={summary.schemaName} class="schema-card">
                <div class="card-header">
                  <h3 class="card-title">{summary.schemaTitle || summary.schemaName}</h3>
                  <div class="card-badges">
                    <span class="badge version-badge">
                      v{summary.currentSchemaVersion}
                    </span>
                    {summary.outdatedEntities > 0 && (
                      <span class="badge warning-badge">
                        {summary.outdatedEntities} obsol√®tes
                      </span>
                    )}
                  </div>
                </div>

                <div class="card-content">
                  {summary.schemaDescription && (
                    <p class="card-description">
                      {summary.schemaDescription.length > 120 
                        ? `${summary.schemaDescription.substring(0, 120)}...`
                        : summary.schemaDescription
                      }
                    </p>
                  )}
                  
                  <div class="card-stats">
                    <div class="stat-item">
                      <span class="stat-value">{summary.totalEntities}</span>
                      <span class="stat-label">entit√©s</span>
                    </div>
                    {Object.keys(summary.entitiesByVersion).length > 1 && (
                      <div class="stat-item">
                        <span class="stat-value">{Object.keys(summary.entitiesByVersion).length}</span>
                        <span class="stat-label">versions</span>
                      </div>
                    )}
                    {summary.outdatedEntities > 0 && (
                      <div class="stat-item warning">
                        <span class="stat-value">{summary.outdatedEntities}</span>
                        <span class="stat-label">√† migrer</span>
                      </div>
                    )}
                  </div>

                  {Object.keys(summary.entitiesByVersion).length > 0 && (
                    <div class="versions-breakdown">
                      <div class="breakdown-header">R√©partition par version:</div>
                      <div class="versions-list">
                        {Object.entries(summary.entitiesByVersion)
                          .sort(([a], [b]) => b.localeCompare(a))
                          .map(([version, count]) => (
                            <span 
                              key={version} 
                              class={`version-tag ${version === summary.currentSchemaVersion ? 'current' : 'old'}`}
                            >
                              v{version}: {count}
                            </span>
                          ))
                        }
                      </div>
                    </div>
                  )}
                </div>

                <div class="card-actions">
                  <button
                    class="btn btn-primary btn-sm"
                    onClick$={() => handleSchemaClick(summary.schemaName)}
                    title="Voir toutes les entit√©s"
                  >
                    üìã Voir entit√©s ({summary.totalEntities})
                  </button>
                  
                  <button
                    class="btn btn-success btn-sm"
                    onClick$={() => handleCreateEntity(summary.schemaName)}
                    title="Cr√©er une nouvelle entit√©"
                  >
                    ‚ûï Nouvelle entit√©
                  </button>
                  
                  {summary.canAutoMigrate && summary.outdatedEntities > 0 && (
                    <button
                      class="btn btn-warning btn-sm"
                      onClick$={() => handleMigrateSchema(summary.schemaName)}
                      title="Migrer les entit√©s obsol√®tes"
                    >
                      üîÑ Migrer ({summary.outdatedEntities})
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Notification */}
      {uiState.value.notification.show && (
        <div class={`notification ${uiState.value.notification.type}`}>
          {uiState.value.notification.message}
        </div>
      )}
    </div>
  );
});